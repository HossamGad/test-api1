// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFF_Api_App.DB;

namespace SFF_Api_App.Migrations
{
    [DbContext(typeof(SFF_DbContext))]
    partial class SFF_DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SFF_Api_App.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MaxStock")
                        .HasColumnType("bit");

                    b.Property<int>("MaxStudios")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int?>("StudioId")
                        .HasColumnType("int");

                    b.Property<string>("StudioName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TriviasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.HasIndex("TriviasId")
                        .IsUnique();

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genre = "Action",
                            MaxStock = false,
                            MaxStudios = 5,
                            ReviewId = 2,
                            Stock = 5,
                            StudioName = "Studio1",
                            Title = "ABC_Movie",
                            TriviasId = 1
                        },
                        new
                        {
                            Id = 2,
                            Genre = "Action",
                            MaxStock = false,
                            MaxStudios = 5,
                            ReviewId = 2,
                            Stock = 5,
                            StudioName = "Studio1",
                            Title = "ABCD_Movie",
                            TriviasId = 1
                        },
                        new
                        {
                            Id = 3,
                            Genre = "Action",
                            MaxStock = false,
                            MaxStudios = 5,
                            ReviewId = 2,
                            Stock = 5,
                            StudioName = "Studio2",
                            Title = "ABCDE_Movie",
                            TriviasId = 1
                        });
                });

            modelBuilder.Entity("SFF_Api_App.Models.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRented")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("StudioId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRented = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 3,
                            StudioId = 4
                        },
                        new
                        {
                            Id = 2,
                            DateRented = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 3,
                            StudioId = 4
                        });
                });

            modelBuilder.Entity("SFF_Api_App.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Grade = 5,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 2,
                            Grade = 4,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("SFF_Api_App.Models.Studio", b =>
                {
                    b.Property<int>("StudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ort")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudioId");

                    b.ToTable("Studios");

                    b.HasData(
                        new
                        {
                            StudioId = 1,
                            Name = "Studio 1",
                            Ort = "Ort 1"
                        },
                        new
                        {
                            StudioId = 2,
                            Name = "Studio 2",
                            Ort = "Ort 2"
                        },
                        new
                        {
                            StudioId = 3,
                            Name = "Studio 3",
                            Ort = "Ort 3"
                        });
                });

            modelBuilder.Entity("SFF_Api_App.Models.Trivias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Trivias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Trivias 1"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Trivias 2"
                        });
                });

            modelBuilder.Entity("SFF_Api_App.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SFF_Api_App.Models.Movie", b =>
                {
                    b.HasOne("SFF_Api_App.Models.Studio", "Studio")
                        .WithMany("Movies")
                        .HasForeignKey("StudioId");

                    b.HasOne("SFF_Api_App.Models.Trivias", null)
                        .WithOne("Movie")
                        .HasForeignKey("SFF_Api_App.Models.Movie", "TriviasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFF_Api_App.Models.Rental", b =>
                {
                    b.HasOne("SFF_Api_App.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFF_Api_App.Models.Studio", "Studio")
                        .WithMany()
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SFF_Api_App.Models.Review", b =>
                {
                    b.HasOne("SFF_Api_App.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("SFF_Api_App.Models.Trivias", b =>
                {
                    b.HasOne("SFF_Api_App.Models.Review", null)
                        .WithMany("Trivia")
                        .HasForeignKey("ReviewId");
                });
#pragma warning restore 612, 618
        }
    }
}
